What happens when you initialize a repository? Why do you need to do it?
  Initializing a repository creates a .git folder in the folder/directory/repository.
  The .git folder is hidden form normal view because it has a '.' in front of the
  file name. The .git folder holds the metadata that will keep track of the
  different versions of the files that have been committed. The repository must
  be initialized so that the metadata about the files can be stored in the
  .git folder.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
  The staging area is kind of a weird place. It holds files that haven't been
  committed yet, but the files are still being worked on. I haven't decided
  if the files in the staging area are being tracked? I think it means the files
  are being tracked now that they are in the staging area. Thus, when those files
  are committed, there is metadata available about them. So, I'm not sure what
  value it adds yet. I guess the assumption is that you create a file and then
  add it to the staging area, so there hasn't been sufficient work done on the
  file to justify making a commit. By adding the file to the staging area,
  data about the changes can be tracked leading up to the first commit.

How can you use the staging area to make sure you have one commit per logical change?
  The staging area shows the files that are ready to be committed. I can keep track
  of the files in the staging area to be sure that I can explain all the files
  in single commit comment. If they files are to big for one logical explanation, I
  can remove the necessary files from the staging area so that they are not included
  in the commit. Essentially, the staging area gives me a place to review the work
  I have done before making the changes permanent commits.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
  Branches would be good for any experimental changes to a project, or changes to a
  project that would lead to a different end-point from where the master branch
  is intended to go. For instance, making totally different versions of the same
  game (like was done when changing how many pieces the asteroids split into).
  Maybe I'm in a situation in which I want the game to have a different ending.
  Maybe I'm a situation in which I want to change the type of data that a
  function or class accepts as input. The branches would help from getting those
  versions mixed or from breaking the original version.

How do the diagrams help you visualize the branch structure?
  Visualizing the diagrams helps me see how there is structure and pattern
  to commits. The diagram shows how commits and branches trace the development
  of the project over time. The project can split into multiple directions,
  but Git always lets you trace your way back. The diagrams also make it easier
  to understand what Git checkout does. I can hop from point to point on the
  structure and I understand what happens when doing an "orphan" checkout.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
  Merging two branches together merges the changes between the two branches
  and combines the branches into a single branch. The changes to keep are based
  on the changes that were present in the most common parent commit. The merge
  is represented as the creation of a new branch because the both branches
  become one.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
  Pros for automatic: easy, consistent rule for how the merge is created
  Cons for automatic: possible to come across conflicts that must be dealt
  with manually, less control of the content of the file
  Pros for manual: total control over content of the file, ensures correct
  parts are of code are merged.
  Cons for manual: time consuming, not always necessary
